// Code generated by "enumer -type=Color -transform=snake"; DO NOT EDIT.

package color

import (
	"fmt"
)

const _ColorName = "whiteblack"

var _ColorIndex = [...]uint8{0, 5, 10}

func (i Color) String() string {
	if i < 0 || i >= Color(len(_ColorIndex)-1) {
		return fmt.Sprintf("Color(%d)", i)
	}
	return _ColorName[_ColorIndex[i]:_ColorIndex[i+1]]
}

var _ColorValues = []Color{0, 1}

var _ColorNameToValueMap = map[string]Color{
	_ColorName[0:5]:  0,
	_ColorName[5:10]: 1,
}

// ColorString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func ColorString(s string) (Color, error) {
	if val, ok := _ColorNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Color values", s)
}

// ColorValues returns all values of the enum
func ColorValues() []Color {
	return _ColorValues
}

// IsAColor returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Color) IsAColor() bool {
	for _, v := range _ColorValues {
		if i == v {
			return true
		}
	}
	return false
}
